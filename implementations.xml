<?xml version="1.0" encoding="iso-8859-1" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">
<chapter>
  <header>
    <title>Implementation and Ports of Erlang</title>
    <prepared>Matthias Lang</prepared>
<docno></docno>
<date>2007-09-12</date>
    <rev>1.0</rev>
    <file>implementations.xml</file>
  </header>

<section>
    <title>Open Source Erlang</title>

    <p>
      <url href="http://www.erlang.org/"> Open Source Erlang </url> is
      the standard implementation of Erlang. You can use Open Source
      Erlang to build commercial products without having to pay
      royalties or licence fees to Ericsson. Open Source Erlang uses
      the Apache License 2.0.
    </p>

</section>
<section><title>What Experimental, Research and Historical
Implementations are there?</title>

	<list>

	<item><p><url
		href="http://www.it.uu.se/research/group/hipe">
	  High Performance Erlang</url> (HiPE) is part of
          ordinary Open Source Erlang. It allows compiling Erlang
          modules to native code.</p></item>

          <item><p><url
                       href='https://github.com/trifork/erjang'>Erjang</url>
          is an experimental Erlang VM implemented in Java.
          </p>
          </item>

	<item><p>
		<url href="https://github.com/feeley/etos/">
		Erlang to Scheme Compiler</url> (ETOS).
		ETOS was another research project to compile Erlang
		programs to native code by first translating the
	        program into scheme. They have some impressive benchmarks.
		ETOS is no longer under active development.</p></item>

	<item><p>
		Geoff's Erlang (GERL) supported a subset of the Erlang
                language. GERL compiled to native code via C. GERL has
		fallen into disuse.</p></item>

	<item><p><url
		href="http://www.adfa.edu.au/~lpb/research/sserl/">
		Safe Erlang</url>,
		which is a prototype made by extending an older version
		of Ericsson's implementation, is intended for
		applications where Erlang nodes must cooperate with
		other Erlang nodes which are not trusted. Safe Erlang
                is no longer under active development.</p></item>

	</list>

</section>
<section>
    <marker id="version-table"/>
    <title> Which version of Erlang am I running?</title>
    <p>
        The easiest way to tell is to look at the banner Erlang prints
	at startup, e.g.
    </p>

	<pre>
        Erlang/OTP 17 [RELEASE CANDIDATE 1] [erts-6.0] [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]
	</pre>

    <p>
	From Erlang code, in recent releases,
	call <c>erlang:system_info(otp_release)</c>
	to find out which release you are running.
    </p>

</section>
<section><title> What operating systems does Erlang run on?</title>
<p>

	Erlang runs on most unix and unix-like systems and on the
	currently popular flavours of windows. Ericsson
	have compiled it for
</p>

	<list>
	  <item><p> BSD</p></item>
	  <item><p> Linux</p></item>
	  <item><p> Microsoft Windows</p></item>
	  <item><p> OSX</p></item>
	  <item><p> Solaris</p></item>
	  <item><p> TRU64</p></item>
	  <item><p> VxWorks</p></item>
	</list>

        <p>
	  There are reports on the mailing list of other people
	  compiling it successfully on IRIX, along with reports of Erlang
	  running on less usual systems such as iPhones, Xboxes, QNX,
	  Tilera 64-core CPUs and many embedded systems.
	</p>

</section>
<section><title> What implementations of the Erlang Virtual Machine are there?</title>
<p>

	Almost everyone uses "the new BEAM", where BEAM stands
	for Bogdan/Bj&ouml;rn's Erlang Abstract Machine. This is
	the virtual machine supported in the commercial release.
	</p><p>

	The other virtual machines are of mostly historical interest:
</p>
	<section>
	<title>JAM</title><p>

		This was the original Erlang virtual machine,
		  inspired by the (Prolog) WAM. JAM stands for
		  "Joe's Abstract Machine".</p>

	</section>
	<section>
	<title>old BEAM</title><p>

		This was an attempt to compile Erlang
		to C, and then compile the C to native code. It was
		abandoned after benchmarking showed that the resulting
		code was only faster than VM-based Erlang for small programs.
</p>
	</section>

</section>

<section>
    <marker id="cygwin-cross"/>
    <title>Can Erlang be compiled under Microsoft Windows?</title>
<p>

	HOWTO/INSTALL-WIN32.md in the source code distribution which
	explains how to do this.

</p></section>

<section><title>How can I cross-compile Erlang?</title>
<p>
  The standard Erlang/OTP distribution includes support and
  documentation for cross compiling. This is described in the
  HOWTO/INSTALL-CROSS.md file in the Erlang source, available from the
  <url href="http://erlang.org/download.html">downloads page</url>.
</p>
</section>

<section><title>Is Erlang small enough for embedded systems?</title>
<p>
  Many people run Erlang on many different types of embedded systems
  such as mobile telephones, telecommunication switching equipment and
  in-car electronics.

  </p><p>
  Rule of thumb: if the embedded system can run an
  operating system like linux, then it is possible
  to get current implementations of Erlang running on it
  with a moderate amount of effort.

  </p><p>
  Getting Erlang to run on, say, an 8 bit CPU with 32kByte of
  RAM is not feasible.

  </p><p>
  People successfully run the Ericsson implementation of
  Erlang on systems with as little as 16MByte of RAM. It
  is reasonably straightforward to fit Erlang itself into
  2MByte of persistant storage (e.g. a flash disk).

  </p><p>
  A 2MByte stripped Erlang system can include the
  beam emulator and almost all of the stdlib, sasl,
  kernel, inets and runtime_tools libraries, provided
  the libraries are compiled without debugging information
  and are compressed.
</p>

</section>
</chapter>
